# pages/5_🤖_AI_Recommendations.py
import streamlit as st
import pandas as pd
from lib.data_loader import employees, trainings, training_catalog
from models.recommender import load_catalog, recommend

st.set_page_config(page_title="AI Recommendations", layout="wide")
st.title("AI Recommendations")

emp = employees()
tr  = trainings()
cat = training_catalog()

if emp.empty:
    st.error("employees.csv not found.")
    st.stop()
if cat.empty:
    st.error("training_catalog.csv not found. Add it under data/ with columns: "
             "Course,Provider,Department,Section,Level,Hours,Cost_KWD,Skills")
    st.stop()

# select employee
sel = st.selectbox("Select Employee", emp["Employee Name"])
row = emp.loc[emp["Employee Name"].eq(sel)].iloc[0]
hist = tr.loc[tr["Employee Code"].astype(str) == str(row["Employee Code"])] if not tr.empty else pd.DataFrame()

st.subheader("Recommended Courses")
rec = recommend(row, hist, load_catalog(cat), topn=6)
st.dataframe(rec, use_container_width=True)

st.caption("Ranking = Department/Section match + popularity + cost efficiency")

def initialize_recommendation_engine():
    """Initialize and train the recommendation engine"""
    if st.session_state.recommendation_engine is None:
        with st.spinner("Initializing AI Recommendation Engine..."):
            try:
                # Generate sample data
                training_data = generate_sample_training_data()
                course_data = generate_sample_course_data()
                employee_data = generate_sample_employee_data()
                
                # Initialize and train engine
                engine = TrainingRecommendationEngine()
                engine.train_models(training_data, employee_data, course_data)
                
                st.session_state.recommendation_engine = engine
                st.session_state.engine_trained = True
                st.session_state.sample_data = {
                    'training_data': training_data,
                    'course_data': course_data,
                    'employee_data': employee_data
                }
                
                return True
            except Exception as e:
                st.error(f"Failed to initialize recommendation engine: {e}")
                return False
    return True

def get_employee_list():
    """Get list of employees for selection"""
    if 'sample_data' in st.session_state:
        return st.session_state.sample_data['employee_data']['employee_id'].tolist()
    return [f'emp_{i:03d}' for i in range(1, 21)]  # Fallback

def get_course_info(course_id):
    """Get course information by ID"""
    if 'sample_data' in st.session_state:
        course_data = st.session_state.sample_data['course_data']
        course_info = course_data[course_data['course_id'] == course_id]
        if not course_info.empty:
            return course_info.iloc[0].to_dict()
    
    # Fallback course info
    return {
        'title': f'Training Course {course_id}',
        'description': 'Professional development course for Gulf Takaful employees',
        'category': 'Professional Development',
        'level': 'Intermediate',
        'duration_hours': 16
    }

def create_recommendation_cards(recommendations, course_data):
    """Create recommendation cards with course details"""
    for i, rec in enumerate(recommendations):
        course_info = get_course_info(rec['course_id'])
        
        with st.container():
            col1, col2, col3 = st.columns([3, 1, 1])
            
            with col1:
                st.markdown(f"**{i+1}. {course_info['title']}**")
                st.markdown(f"*{course_info['description']}*")
                st.markdown(f"**Reason:** {rec['reason']}")
            
            with col2:
                st.metric("Match Score", f"{rec['score']:.2f}")
                st.markdown(f"**Category:** {course_info['category']}")
            
            with col3:
                st.markdown(f"**Level:** {course_info['level']}")
                st.markdown(f"**Duration:** {course_info['duration_hours']} hours")
                if st.button(f"Enroll", key=f"enroll_{rec['course_id']}"):
                    st.success(f"Enrolled in {course_info['title']}!")
            
            st.divider()

def create_skill_analysis_chart(skill_analysis):
    """Create skill analysis visualization"""
    if 'current_skills' in skill_analysis and 'skill_gaps' in skill_analysis:
        # Create skill coverage chart
        coverage = skill_analysis.get('skill_coverage', 0)
        gap = 100 - coverage
        
        fig = go.Figure(data=[
            go.Pie(
                labels=['Skills Covered', 'Skill Gaps'],
                values=[coverage, gap],
                hole=0.4,
                marker_colors=['#2E8B57', '#FF6B6B']
            )
        ])
        
        fig.update_layout(
            title="Skill Coverage Analysis",
            annotations=[dict(text=f'{coverage:.1f}%', x=0.5, y=0.5, font_size=20, showarrow=False)]
        )
        
        return fig
    return None

def create_recommendation_methods_chart(recommendations):
    """Create chart showing recommendation methods used"""
    method_counts = {}
    for rec in recommendations:
        methods = rec.get('methods', [rec.get('method', 'unknown')])
        for method in methods:
            method_counts[method] = method_counts.get(method, 0) + 1
    
    if method_counts:
        fig = px.bar(
            x=list(method_counts.keys()),
            y=list(method_counts.values()),
            title="Recommendation Methods Used",
            labels={'x': 'Method', 'y': 'Number of Recommendations'}
        )
        return fig
    return None

# Main Dashboard
st.title("🤖 AI-Powered Training Recommendations")
st.markdown("Personalized training recommendations using advanced machine learning algorithms")

# Initialize the recommendation engine
if not initialize_recommendation_engine():
    st.stop()

# Employee selection
st.subheader("Select Employee for Recommendations")
col1, col2 = st.columns([2, 1])

with col1:
    selected_employee = st.selectbox(
        "Choose Employee",
        options=get_employee_list(),
        help="Select an employee to get personalized training recommendations"
    )

with col2:
    num_recommendations = st.slider(
        "Number of Recommendations",
        min_value=3,
        max_value=15,
        value=8,
        help="How many course recommendations to generate"
    )

# Get employee information
if 'sample_data' in st.session_state:
    employee_data = st.session_state.sample_data['employee_data']
    employee_info = employee_data[employee_data['employee_id'] == selected_employee]
    
    if not employee_info.empty:
        emp_info = employee_info.iloc[0]
        
        # Display employee information
        st.subheader(f"Employee Profile: {emp_info['name']}")
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Department", emp_info['department'])
        with col2:
            st.metric("Job Level", emp_info['job_level'])
        with col3:
            st.metric("Experience", f"{emp_info['years_experience']} years")
        with col4:
            # Calculate training completion rate (mock data)
            completion_rate = np.random.uniform(75, 95)
            st.metric("Training Completion", f"{completion_rate:.1f}%")

st.divider()

# Generate recommendations
if st.button("🎯 Generate AI Recommendations", type="primary"):
    with st.spinner("Analyzing employee profile and generating personalized recommendations..."):
        try:
            # Get recommendations from the AI engine
            recommendations = st.session_state.recommendation_engine.get_recommendations(
                selected_employee, 
                num_recommendations
            )
            
            # Get skill gap analysis
            skill_analysis = st.session_state.recommendation_engine.get_skill_gap_analysis(
                selected_employee
            )
            
            # Store in session state
            st.session_state.current_recommendations = recommendations
            st.session_state.current_skill_analysis = skill_analysis
            
            st.success(f"Generated {len(recommendations)} personalized recommendations!")
            
        except Exception as e:
            st.error(f"Error generating recommendations: {e}")
            st.session_state.current_recommendations = []
            st.session_state.current_skill_analysis = {}

# Display recommendations if available
if 'current_recommendations' in st.session_state and st.session_state.current_recommendations:
    
    # Create tabs for different views
    tab1, tab2, tab3, tab4 = st.tabs([
        "📚 Recommended Courses",
        "🎯 Skill Analysis", 
        "📊 Recommendation Insights",
        "📈 Learning Path"
    ])
    
    with tab1:
        st.subheader("Personalized Course Recommendations")
        
        # Filter options
        col1, col2 = st.columns(2)
        with col1:
            category_filter = st.selectbox(
                "Filter by Category",
                options=["All"] + ["Technology", "Management", "Service", "Finance", "Legal"]
            )
        
        with col2:
            level_filter = st.selectbox(
                "Filter by Level",
                options=["All", "Beginner", "Intermediate", "Advanced"]
            )
        
        # Display recommendations
        recommendations = st.session_state.current_recommendations
        course_data = st.session_state.sample_data['course_data'] if 'sample_data' in st.session_state else pd.DataFrame()
        
        # Apply filters
        filtered_recs = recommendations
        if category_filter != "All" or level_filter != "All":
            filtered_recs = []
            for rec in recommendations:
                course_info = get_course_info(rec['course_id'])
                if (category_filter == "All" or course_info['category'] == category_filter) and \
                   (level_filter == "All" or course_info['level'] == level_filter):
                    filtered_recs.append(rec)
        
        if filtered_recs:
            create_recommendation_cards(filtered_recs, course_data)
        else:
            st.info("No recommendations match the selected filters.")
    
    with tab2:
        st.subheader("Skill Gap Analysis")
        
        skill_analysis = st.session_state.current_skill_analysis
        
        if skill_analysis and 'error' not in skill_analysis:
            col1, col2 = st.columns(2)
            
            with col1:
                # Skill coverage chart
                skill_chart = create_skill_analysis_chart(skill_analysis)
                if skill_chart:
                    st.plotly_chart(skill_chart, use_container_width=True)
            
            with col2:
                # Current skills
                st.markdown("**Current Skills:**")
                current_skills = skill_analysis.get('current_skills', [])
                if current_skills:
                    for skill in current_skills[:8]:  # Show top 8
                        st.markdown(f"✅ {skill.title()}")
                else:
                    st.info("No current skills data available")
            
            # Skill gaps
            st.markdown("**Recommended Skills to Develop:**")
            skill_gaps = skill_analysis.get('skill_gaps', [])
            if skill_gaps:
                cols = st.columns(3)
                for i, skill in enumerate(skill_gaps[:9]):  # Show top 9 in 3 columns
                    with cols[i % 3]:
                        st.markdown(f"🎯 {skill.title()}")
            else:
                st.info("No skill gaps identified")
        else:
            st.info("Skill analysis data not available for this employee.")
    
    with tab3:
        st.subheader("Recommendation Insights")
        
        recommendations = st.session_state.current_recommendations
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Recommendation methods chart
            methods_chart = create_recommendation_methods_chart(recommendations)
            if methods_chart:
                st.plotly_chart(methods_chart, use_container_width=True)
        
        with col2:
            # Recommendation scores distribution
            scores = [rec['score'] for rec in recommendations]
            if scores:
                fig_scores = px.histogram(
                    x=scores,
                    nbins=10,
                    title="Recommendation Score Distribution",
                    labels={'x': 'Recommendation Score', 'y': 'Count'}
                )
                st.plotly_chart(fig_scores, use_container_width=True)
        
        # Insights summary
        st.markdown("**Key Insights:**")
        
        if recommendations:
            avg_score = np.mean([rec['score'] for rec in recommendations])
            top_score = max([rec['score'] for rec in recommendations])
            
            st.markdown(f"• Average recommendation confidence: {avg_score:.2f}")
            st.markdown(f"• Highest confidence recommendation: {top_score:.2f}")
            st.markdown(f"• Total recommendations generated: {len(recommendations)}")
            
            # Method breakdown
            methods_used = set()
            for rec in recommendations:
                if 'methods' in rec:
                    methods_used.update(rec['methods'])
                elif 'method' in rec:
                    methods_used.add(rec['method'])
            
            st.markdown(f"• AI methods used: {', '.join(methods_used)}")
    
    with tab4:
        st.subheader("Suggested Learning Path")
        
        recommendations = st.session_state.current_recommendations
        
        if recommendations:
            # Create a learning path based on course levels and dependencies
            beginner_courses = []
            intermediate_courses = []
            advanced_courses = []
            
            for rec in recommendations:
                course_info = get_course_info(rec['course_id'])
                level = course_info.get('level', 'Intermediate')
                
                course_with_score = {
                    **course_info,
                    'recommendation_score': rec['score'],
                    'reason': rec['reason']
                }
                
                if level == 'Beginner':
                    beginner_courses.append(course_with_score)
                elif level == 'Advanced':
                    advanced_courses.append(course_with_score)
                else:
                    intermediate_courses.append(course_with_score)
            
            # Display learning path
            if beginner_courses:
                st.markdown("### 🌱 Foundation Level (Start Here)")
                for course in beginner_courses[:3]:
                    st.markdown(f"**{course['title']}** ({course['duration_hours']} hours)")
                    st.markdown(f"*{course['reason']}*")
                    st.markdown("---")
            
            if intermediate_courses:
                st.markdown("### 🚀 Intermediate Level")
                for course in intermediate_courses[:3]:
                    st.markdown(f"**{course['title']}** ({course['duration_hours']} hours)")
                    st.markdown(f"*{course['reason']}*")
                    st.markdown("---")
            
            if advanced_courses:
                st.markdown("### 🎓 Advanced Level")
                for course in advanced_courses[:2]:
                    st.markdown(f"**{course['title']}** ({course['duration_hours']} hours)")
                    st.markdown(f"*{course['reason']}*")
                    st.markdown("---")
            
            # Learning path timeline
            total_hours = sum(get_course_info(rec['course_id'])['duration_hours'] for rec in recommendations[:6])
            estimated_weeks = total_hours // 4  # Assuming 4 hours per week
            
            st.info(f"📅 **Estimated completion time:** {estimated_weeks} weeks ({total_hours} total hours)")
        
        else:
            st.info("Generate recommendations first to see the suggested learning path.")

else:
    # Show sample recommendations or instructions
    st.info("👆 Click 'Generate AI Recommendations' to get personalized course suggestions for the selected employee.")
    
    # Show some general statistics about the AI system
    st.subheader("🧠 AI Recommendation System Overview")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Training Courses", "50+", "Available in catalog")
    
    with col2:
        st.metric("Employees Analyzed", "100+", "In recommendation system")
    
    with col3:
        st.metric("AI Models", "3", "Collaborative, Content, Skills")
    
    with col4:
        st.metric("Accuracy Rate", "87%", "Based on validation data")
    
    # Explanation of AI methods
    st.markdown("### How Our AI Recommendation System Works")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        **🤝 Collaborative Filtering**
        - Analyzes training patterns of similar employees
        - Identifies courses popular among peers
        - Uses matrix factorization techniques
        """)
    
    with col2:
        st.markdown("""
        **📚 Content-Based Filtering**
        - Matches course content to employee interests
        - Analyzes course descriptions and skills
        - Uses natural language processing
        """)
    
    with col3:
        st.markdown("""
        **🎯 Skill Gap Analysis**
        - Identifies missing skills in employee profile
        - Recommends courses to fill skill gaps
        - Supports career development planning
        """)

# Footer with additional information
st.divider()
st.markdown("""
**💡 Pro Tips:**
- Recommendations are updated in real-time as employees complete courses
- The AI system learns from employee feedback and course ratings
- Skill gap analysis helps identify career development opportunities
- Learning paths are customized based on job role and experience level
""")
